/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceInstance{}

// ServiceInstance struct for ServiceInstance
type ServiceInstance struct {
	Id             *int64 `json:"id,omitempty"`
	ServiceId      *int64 `json:"serviceId,omitempty"`
	OrganizationId *int64 `json:"organization_id,omitempty"`
	ApiServerId    *int64 `json:"api_server_id,omitempty"`
}

// NewServiceInstance instantiates a new ServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInstance() *ServiceInstance {
	this := ServiceInstance{}
	return &this
}

// NewServiceInstanceWithDefaults instantiates a new ServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInstanceWithDefaults() *ServiceInstance {
	this := ServiceInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceInstance) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ServiceInstance) SetId(v int64) {
	o.Id = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *ServiceInstance) GetServiceId() int64 {
	if o == nil || IsNil(o.ServiceId) {
		var ret int64
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetServiceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *ServiceInstance) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given int64 and assigns it to the ServiceId field.
func (o *ServiceInstance) SetServiceId(v int64) {
	o.ServiceId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ServiceInstance) GetOrganizationId() int64 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret int64
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetOrganizationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ServiceInstance) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given int64 and assigns it to the OrganizationId field.
func (o *ServiceInstance) SetOrganizationId(v int64) {
	o.OrganizationId = &v
}

// GetApiServerId returns the ApiServerId field value if set, zero value otherwise.
func (o *ServiceInstance) GetApiServerId() int64 {
	if o == nil || IsNil(o.ApiServerId) {
		var ret int64
		return ret
	}
	return *o.ApiServerId
}

// GetApiServerIdOk returns a tuple with the ApiServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetApiServerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ApiServerId) {
		return nil, false
	}
	return o.ApiServerId, true
}

// HasApiServerId returns a boolean if a field has been set.
func (o *ServiceInstance) HasApiServerId() bool {
	if o != nil && !IsNil(o.ApiServerId) {
		return true
	}

	return false
}

// SetApiServerId gets a reference to the given int64 and assigns it to the ApiServerId field.
func (o *ServiceInstance) SetApiServerId(v int64) {
	o.ApiServerId = &v
}

func (o ServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.ApiServerId) {
		toSerialize["api_server_id"] = o.ApiServerId
	}
	return toSerialize, nil
}

type NullableServiceInstance struct {
	value *ServiceInstance
	isSet bool
}

func (v NullableServiceInstance) Get() *ServiceInstance {
	return v.value
}

func (v *NullableServiceInstance) Set(val *ServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInstance(val *ServiceInstance) *NullableServiceInstance {
	return &NullableServiceInstance{value: val, isSet: true}
}

func (v NullableServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
