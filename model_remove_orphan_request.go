/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RemoveOrphanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveOrphanRequest{}

// RemoveOrphanRequest struct for RemoveOrphanRequest
type RemoveOrphanRequest struct {
	ApiServerId int64 `json:"apiServerId"`
	ServiceId   int64 `json:"serviceId"`
}

type _RemoveOrphanRequest RemoveOrphanRequest

// NewRemoveOrphanRequest instantiates a new RemoveOrphanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveOrphanRequest(apiServerId int64, serviceId int64) *RemoveOrphanRequest {
	this := RemoveOrphanRequest{}
	this.ApiServerId = apiServerId
	this.ServiceId = serviceId
	return &this
}

// NewRemoveOrphanRequestWithDefaults instantiates a new RemoveOrphanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveOrphanRequestWithDefaults() *RemoveOrphanRequest {
	this := RemoveOrphanRequest{}
	return &this
}

// GetApiServerId returns the ApiServerId field value
func (o *RemoveOrphanRequest) GetApiServerId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ApiServerId
}

// GetApiServerIdOk returns a tuple with the ApiServerId field value
// and a boolean to check if the value has been set.
func (o *RemoveOrphanRequest) GetApiServerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiServerId, true
}

// SetApiServerId sets field value
func (o *RemoveOrphanRequest) SetApiServerId(v int64) {
	o.ApiServerId = v
}

// GetServiceId returns the ServiceId field value
func (o *RemoveOrphanRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *RemoveOrphanRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *RemoveOrphanRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

func (o RemoveOrphanRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveOrphanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiServerId"] = o.ApiServerId
	toSerialize["serviceId"] = o.ServiceId
	return toSerialize, nil
}

func (o *RemoveOrphanRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiServerId",
		"serviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoveOrphanRequest := _RemoveOrphanRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoveOrphanRequest)

	if err != nil {
		return err
	}

	*o = RemoveOrphanRequest(varRemoveOrphanRequest)

	return err
}

type NullableRemoveOrphanRequest struct {
	value *RemoveOrphanRequest
	isSet bool
}

func (v NullableRemoveOrphanRequest) Get() *RemoveOrphanRequest {
	return v.value
}

func (v *NullableRemoveOrphanRequest) Set(val *RemoveOrphanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveOrphanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveOrphanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveOrphanRequest(val *RemoveOrphanRequest) *NullableRemoveOrphanRequest {
	return &NullableRemoveOrphanRequest{value: val, isSet: true}
}

func (v NullableRemoveOrphanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveOrphanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
