/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RenameOrganizationTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameOrganizationTokenRequest{}

// RenameOrganizationTokenRequest struct for RenameOrganizationTokenRequest
type RenameOrganizationTokenRequest struct {
	OrganizationId int64  `json:"organizationId"`
	TokenId        string `json:"tokenId"`
	Description    string `json:"description"`
}

type _RenameOrganizationTokenRequest RenameOrganizationTokenRequest

// NewRenameOrganizationTokenRequest instantiates a new RenameOrganizationTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameOrganizationTokenRequest(organizationId int64, tokenId string, description string) *RenameOrganizationTokenRequest {
	this := RenameOrganizationTokenRequest{}
	this.OrganizationId = organizationId
	this.TokenId = tokenId
	this.Description = description
	return &this
}

// NewRenameOrganizationTokenRequestWithDefaults instantiates a new RenameOrganizationTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameOrganizationTokenRequestWithDefaults() *RenameOrganizationTokenRequest {
	this := RenameOrganizationTokenRequest{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value
func (o *RenameOrganizationTokenRequest) GetOrganizationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *RenameOrganizationTokenRequest) GetOrganizationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *RenameOrganizationTokenRequest) SetOrganizationId(v int64) {
	o.OrganizationId = v
}

// GetTokenId returns the TokenId field value
func (o *RenameOrganizationTokenRequest) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *RenameOrganizationTokenRequest) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *RenameOrganizationTokenRequest) SetTokenId(v string) {
	o.TokenId = v
}

// GetDescription returns the Description field value
func (o *RenameOrganizationTokenRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RenameOrganizationTokenRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RenameOrganizationTokenRequest) SetDescription(v string) {
	o.Description = v
}

func (o RenameOrganizationTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameOrganizationTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["tokenId"] = o.TokenId
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *RenameOrganizationTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationId",
		"tokenId",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameOrganizationTokenRequest := _RenameOrganizationTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRenameOrganizationTokenRequest)

	if err != nil {
		return err
	}

	*o = RenameOrganizationTokenRequest(varRenameOrganizationTokenRequest)

	return err
}

type NullableRenameOrganizationTokenRequest struct {
	value *RenameOrganizationTokenRequest
	isSet bool
}

func (v NullableRenameOrganizationTokenRequest) Get() *RenameOrganizationTokenRequest {
	return v.value
}

func (v *NullableRenameOrganizationTokenRequest) Set(val *RenameOrganizationTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameOrganizationTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameOrganizationTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameOrganizationTokenRequest(val *RenameOrganizationTokenRequest) *NullableRenameOrganizationTokenRequest {
	return &NullableRenameOrganizationTokenRequest{value: val, isSet: true}
}

func (v NullableRenameOrganizationTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameOrganizationTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
