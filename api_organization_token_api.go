/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type OrganizationTokenApiAPI interface {

	/*
		CreateTokenForOrganization Method for CreateTokenForOrganization

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateTokenForOrganizationRequest
	*/
	CreateTokenForOrganization(ctx context.Context) ApiCreateTokenForOrganizationRequest

	// CreateTokenForOrganizationExecute executes the request
	//  @return OrganizationTokenResponse
	CreateTokenForOrganizationExecute(r ApiCreateTokenForOrganizationRequest) (*OrganizationTokenResponse, *http.Response, error)

	/*
		DeleteOrganizationToken Method for DeleteOrganizationToken

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiDeleteOrganizationTokenRequest
	*/
	DeleteOrganizationToken(ctx context.Context) ApiDeleteOrganizationTokenRequest

	// DeleteOrganizationTokenExecute executes the request
	DeleteOrganizationTokenExecute(r ApiDeleteOrganizationTokenRequest) (*http.Response, error)

	/*
		GetTokensForService1 Method for GetTokensForService1

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetTokensForService1Request
	*/
	GetTokensForService1(ctx context.Context) ApiGetTokensForService1Request

	// GetTokensForService1Execute executes the request
	//  @return []OrganizationTokenResponse
	GetTokensForService1Execute(r ApiGetTokensForService1Request) ([]OrganizationTokenResponse, *http.Response, error)

	/*
		RenameTokenForService Method for RenameTokenForService

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRenameTokenForServiceRequest
	*/
	RenameTokenForService(ctx context.Context) ApiRenameTokenForServiceRequest

	// RenameTokenForServiceExecute executes the request
	//  @return OrganizationTokenResponse
	RenameTokenForServiceExecute(r ApiRenameTokenForServiceRequest) (*OrganizationTokenResponse, *http.Response, error)

	/*
		RotateTokenForOrganization Method for RotateTokenForOrganization

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRotateTokenForOrganizationRequest
	*/
	RotateTokenForOrganization(ctx context.Context) ApiRotateTokenForOrganizationRequest

	// RotateTokenForOrganizationExecute executes the request
	//  @return OrganizationTokenResponse
	RotateTokenForOrganizationExecute(r ApiRotateTokenForOrganizationRequest) (*OrganizationTokenResponse, *http.Response, error)
}

// OrganizationTokenApiAPIService OrganizationTokenApiAPI service
type OrganizationTokenApiAPIService service

type ApiCreateTokenForOrganizationRequest struct {
	ctx                            context.Context
	ApiService                     OrganizationTokenApiAPI
	createOrganizationTokenRequest *CreateOrganizationTokenRequest
	authorization                  *string
	dPoP                           *string
}

func (r ApiCreateTokenForOrganizationRequest) CreateOrganizationTokenRequest(createOrganizationTokenRequest CreateOrganizationTokenRequest) ApiCreateTokenForOrganizationRequest {
	r.createOrganizationTokenRequest = &createOrganizationTokenRequest
	return r
}

func (r ApiCreateTokenForOrganizationRequest) Authorization(authorization string) ApiCreateTokenForOrganizationRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateTokenForOrganizationRequest) DPoP(dPoP string) ApiCreateTokenForOrganizationRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiCreateTokenForOrganizationRequest) Execute() (*OrganizationTokenResponse, *http.Response, error) {
	return r.ApiService.CreateTokenForOrganizationExecute(r)
}

/*
CreateTokenForOrganization Method for CreateTokenForOrganization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTokenForOrganizationRequest
*/
func (a *OrganizationTokenApiAPIService) CreateTokenForOrganization(ctx context.Context) ApiCreateTokenForOrganizationRequest {
	return ApiCreateTokenForOrganizationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OrganizationTokenResponse
func (a *OrganizationTokenApiAPIService) CreateTokenForOrganizationExecute(r ApiCreateTokenForOrganizationRequest) (*OrganizationTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrganizationTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationTokenApiAPIService.CreateTokenForOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organizationtoken/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationTokenRequest == nil {
		return localVarReturnValue, nil, reportError("createOrganizationTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.createOrganizationTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOrganizationTokenRequest struct {
	ctx                            context.Context
	ApiService                     OrganizationTokenApiAPI
	deleteOrganizationTokenRequest *DeleteOrganizationTokenRequest
	authorization                  *string
	dPoP                           *string
}

func (r ApiDeleteOrganizationTokenRequest) DeleteOrganizationTokenRequest(deleteOrganizationTokenRequest DeleteOrganizationTokenRequest) ApiDeleteOrganizationTokenRequest {
	r.deleteOrganizationTokenRequest = &deleteOrganizationTokenRequest
	return r
}

func (r ApiDeleteOrganizationTokenRequest) Authorization(authorization string) ApiDeleteOrganizationTokenRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteOrganizationTokenRequest) DPoP(dPoP string) ApiDeleteOrganizationTokenRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiDeleteOrganizationTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationTokenExecute(r)
}

/*
DeleteOrganizationToken Method for DeleteOrganizationToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteOrganizationTokenRequest
*/
func (a *OrganizationTokenApiAPIService) DeleteOrganizationToken(ctx context.Context) ApiDeleteOrganizationTokenRequest {
	return ApiDeleteOrganizationTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *OrganizationTokenApiAPIService) DeleteOrganizationTokenExecute(r ApiDeleteOrganizationTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationTokenApiAPIService.DeleteOrganizationToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organizationtoken/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteOrganizationTokenRequest == nil {
		return nil, reportError("deleteOrganizationTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.deleteOrganizationTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTokensForService1Request struct {
	ctx                          context.Context
	ApiService                   OrganizationTokenApiAPI
	getOrganizationTokensRequest *GetOrganizationTokensRequest
	authorization                *string
	dPoP                         *string
}

func (r ApiGetTokensForService1Request) GetOrganizationTokensRequest(getOrganizationTokensRequest GetOrganizationTokensRequest) ApiGetTokensForService1Request {
	r.getOrganizationTokensRequest = &getOrganizationTokensRequest
	return r
}

func (r ApiGetTokensForService1Request) Authorization(authorization string) ApiGetTokensForService1Request {
	r.authorization = &authorization
	return r
}

func (r ApiGetTokensForService1Request) DPoP(dPoP string) ApiGetTokensForService1Request {
	r.dPoP = &dPoP
	return r
}

func (r ApiGetTokensForService1Request) Execute() ([]OrganizationTokenResponse, *http.Response, error) {
	return r.ApiService.GetTokensForService1Execute(r)
}

/*
GetTokensForService1 Method for GetTokensForService1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTokensForService1Request
*/
func (a *OrganizationTokenApiAPIService) GetTokensForService1(ctx context.Context) ApiGetTokensForService1Request {
	return ApiGetTokensForService1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OrganizationTokenResponse
func (a *OrganizationTokenApiAPIService) GetTokensForService1Execute(r ApiGetTokensForService1Request) ([]OrganizationTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OrganizationTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationTokenApiAPIService.GetTokensForService1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organizationtoken/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getOrganizationTokensRequest == nil {
		return localVarReturnValue, nil, reportError("getOrganizationTokensRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.getOrganizationTokensRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRenameTokenForServiceRequest struct {
	ctx                            context.Context
	ApiService                     OrganizationTokenApiAPI
	renameOrganizationTokenRequest *RenameOrganizationTokenRequest
	authorization                  *string
	dPoP                           *string
}

func (r ApiRenameTokenForServiceRequest) RenameOrganizationTokenRequest(renameOrganizationTokenRequest RenameOrganizationTokenRequest) ApiRenameTokenForServiceRequest {
	r.renameOrganizationTokenRequest = &renameOrganizationTokenRequest
	return r
}

func (r ApiRenameTokenForServiceRequest) Authorization(authorization string) ApiRenameTokenForServiceRequest {
	r.authorization = &authorization
	return r
}

func (r ApiRenameTokenForServiceRequest) DPoP(dPoP string) ApiRenameTokenForServiceRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiRenameTokenForServiceRequest) Execute() (*OrganizationTokenResponse, *http.Response, error) {
	return r.ApiService.RenameTokenForServiceExecute(r)
}

/*
RenameTokenForService Method for RenameTokenForService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRenameTokenForServiceRequest
*/
func (a *OrganizationTokenApiAPIService) RenameTokenForService(ctx context.Context) ApiRenameTokenForServiceRequest {
	return ApiRenameTokenForServiceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OrganizationTokenResponse
func (a *OrganizationTokenApiAPIService) RenameTokenForServiceExecute(r ApiRenameTokenForServiceRequest) (*OrganizationTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrganizationTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationTokenApiAPIService.RenameTokenForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organizationtoken/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.renameOrganizationTokenRequest == nil {
		return localVarReturnValue, nil, reportError("renameOrganizationTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.renameOrganizationTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRotateTokenForOrganizationRequest struct {
	ctx                            context.Context
	ApiService                     OrganizationTokenApiAPI
	rotateOrganizationTokenRequest *RotateOrganizationTokenRequest
	authorization                  *string
	dPoP                           *string
}

func (r ApiRotateTokenForOrganizationRequest) RotateOrganizationTokenRequest(rotateOrganizationTokenRequest RotateOrganizationTokenRequest) ApiRotateTokenForOrganizationRequest {
	r.rotateOrganizationTokenRequest = &rotateOrganizationTokenRequest
	return r
}

func (r ApiRotateTokenForOrganizationRequest) Authorization(authorization string) ApiRotateTokenForOrganizationRequest {
	r.authorization = &authorization
	return r
}

func (r ApiRotateTokenForOrganizationRequest) DPoP(dPoP string) ApiRotateTokenForOrganizationRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiRotateTokenForOrganizationRequest) Execute() (*OrganizationTokenResponse, *http.Response, error) {
	return r.ApiService.RotateTokenForOrganizationExecute(r)
}

/*
RotateTokenForOrganization Method for RotateTokenForOrganization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRotateTokenForOrganizationRequest
*/
func (a *OrganizationTokenApiAPIService) RotateTokenForOrganization(ctx context.Context) ApiRotateTokenForOrganizationRequest {
	return ApiRotateTokenForOrganizationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OrganizationTokenResponse
func (a *OrganizationTokenApiAPIService) RotateTokenForOrganizationExecute(r ApiRotateTokenForOrganizationRequest) (*OrganizationTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrganizationTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationTokenApiAPIService.RotateTokenForOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organizationtoken/rotate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rotateOrganizationTokenRequest == nil {
		return localVarReturnValue, nil, reportError("rotateOrganizationTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.rotateOrganizationTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
