/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StringArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StringArray{}

// StringArray struct for StringArray
type StringArray struct {
	Array []string `json:"array,omitempty"`
}

// NewStringArray instantiates a new StringArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringArray() *StringArray {
	this := StringArray{}
	return &this
}

// NewStringArrayWithDefaults instantiates a new StringArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringArrayWithDefaults() *StringArray {
	this := StringArray{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *StringArray) GetArray() []string {
	if o == nil || IsNil(o.Array) {
		var ret []string
		return ret
	}
	return o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringArray) GetArrayOk() ([]string, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *StringArray) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given []string and assigns it to the Array field.
func (o *StringArray) SetArray(v []string) {
	o.Array = v
}

func (o StringArray) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StringArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Array) {
		toSerialize["array"] = o.Array
	}
	return toSerialize, nil
}

type NullableStringArray struct {
	value *StringArray
	isSet bool
}

func (v NullableStringArray) Get() *StringArray {
	return v.value
}

func (v *NullableStringArray) Set(val *StringArray) {
	v.value = val
	v.isSet = true
}

func (v NullableStringArray) IsSet() bool {
	return v.isSet
}

func (v *NullableStringArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringArray(val *StringArray) *NullableStringArray {
	return &NullableStringArray{value: val, isSet: true}
}

func (v NullableStringArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
