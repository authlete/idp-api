/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ServiceTokenApiAPI interface {

	/*
		CreateTokenForService Method for CreateTokenForService

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateTokenForServiceRequest
	*/
	CreateTokenForService(ctx context.Context) ApiCreateTokenForServiceRequest

	// CreateTokenForServiceExecute executes the request
	//  @return ServiceTokenResponse
	CreateTokenForServiceExecute(r ApiCreateTokenForServiceRequest) (*ServiceTokenResponse, *http.Response, error)

	/*
		GetTokensForService Method for GetTokensForService

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetTokensForServiceRequest
	*/
	GetTokensForService(ctx context.Context) ApiGetTokensForServiceRequest

	// GetTokensForServiceExecute executes the request
	//  @return []ServiceTokenResponse
	GetTokensForServiceExecute(r ApiGetTokensForServiceRequest) ([]ServiceTokenResponse, *http.Response, error)

	/*
		RenameServiceToken Method for RenameServiceToken

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRenameServiceTokenRequest
	*/
	RenameServiceToken(ctx context.Context) ApiRenameServiceTokenRequest

	// RenameServiceTokenExecute executes the request
	//  @return ServiceTokenResponse
	RenameServiceTokenExecute(r ApiRenameServiceTokenRequest) (*ServiceTokenResponse, *http.Response, error)

	/*
		RevokeServiceToken Method for RevokeServiceToken

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRevokeServiceTokenRequest
	*/
	RevokeServiceToken(ctx context.Context) ApiRevokeServiceTokenRequest

	// RevokeServiceTokenExecute executes the request
	RevokeServiceTokenExecute(r ApiRevokeServiceTokenRequest) (*http.Response, error)

	/*
		RotateServiceToken Method for RotateServiceToken

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRotateServiceTokenRequest
	*/
	RotateServiceToken(ctx context.Context) ApiRotateServiceTokenRequest

	// RotateServiceTokenExecute executes the request
	//  @return ServiceTokenResponse
	RotateServiceTokenExecute(r ApiRotateServiceTokenRequest) (*ServiceTokenResponse, *http.Response, error)
}

// ServiceTokenApiAPIService ServiceTokenApiAPI service
type ServiceTokenApiAPIService service

type ApiCreateTokenForServiceRequest struct {
	ctx                       context.Context
	ApiService                ServiceTokenApiAPI
	createServiceTokenRequest *CreateServiceTokenRequest
	authorization             *string
	dPoP                      *string
}

func (r ApiCreateTokenForServiceRequest) CreateServiceTokenRequest(createServiceTokenRequest CreateServiceTokenRequest) ApiCreateTokenForServiceRequest {
	r.createServiceTokenRequest = &createServiceTokenRequest
	return r
}

func (r ApiCreateTokenForServiceRequest) Authorization(authorization string) ApiCreateTokenForServiceRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateTokenForServiceRequest) DPoP(dPoP string) ApiCreateTokenForServiceRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiCreateTokenForServiceRequest) Execute() (*ServiceTokenResponse, *http.Response, error) {
	return r.ApiService.CreateTokenForServiceExecute(r)
}

/*
CreateTokenForService Method for CreateTokenForService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTokenForServiceRequest
*/
func (a *ServiceTokenApiAPIService) CreateTokenForService(ctx context.Context) ApiCreateTokenForServiceRequest {
	return ApiCreateTokenForServiceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceTokenResponse
func (a *ServiceTokenApiAPIService) CreateTokenForServiceExecute(r ApiCreateTokenForServiceRequest) (*ServiceTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTokenApiAPIService.CreateTokenForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/servicetoken/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServiceTokenRequest == nil {
		return localVarReturnValue, nil, reportError("createServiceTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.createServiceTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTokensForServiceRequest struct {
	ctx                     context.Context
	ApiService              ServiceTokenApiAPI
	getServiceTokensRequest *GetServiceTokensRequest
	authorization           *string
	dPoP                    *string
}

func (r ApiGetTokensForServiceRequest) GetServiceTokensRequest(getServiceTokensRequest GetServiceTokensRequest) ApiGetTokensForServiceRequest {
	r.getServiceTokensRequest = &getServiceTokensRequest
	return r
}

func (r ApiGetTokensForServiceRequest) Authorization(authorization string) ApiGetTokensForServiceRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetTokensForServiceRequest) DPoP(dPoP string) ApiGetTokensForServiceRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiGetTokensForServiceRequest) Execute() ([]ServiceTokenResponse, *http.Response, error) {
	return r.ApiService.GetTokensForServiceExecute(r)
}

/*
GetTokensForService Method for GetTokensForService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTokensForServiceRequest
*/
func (a *ServiceTokenApiAPIService) GetTokensForService(ctx context.Context) ApiGetTokensForServiceRequest {
	return ApiGetTokensForServiceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceTokenResponse
func (a *ServiceTokenApiAPIService) GetTokensForServiceExecute(r ApiGetTokensForServiceRequest) ([]ServiceTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTokenApiAPIService.GetTokensForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/servicetoken/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getServiceTokensRequest == nil {
		return localVarReturnValue, nil, reportError("getServiceTokensRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.getServiceTokensRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRenameServiceTokenRequest struct {
	ctx                       context.Context
	ApiService                ServiceTokenApiAPI
	renameServiceTokenRequest *RenameServiceTokenRequest
	authorization             *string
	dPoP                      *string
}

func (r ApiRenameServiceTokenRequest) RenameServiceTokenRequest(renameServiceTokenRequest RenameServiceTokenRequest) ApiRenameServiceTokenRequest {
	r.renameServiceTokenRequest = &renameServiceTokenRequest
	return r
}

func (r ApiRenameServiceTokenRequest) Authorization(authorization string) ApiRenameServiceTokenRequest {
	r.authorization = &authorization
	return r
}

func (r ApiRenameServiceTokenRequest) DPoP(dPoP string) ApiRenameServiceTokenRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiRenameServiceTokenRequest) Execute() (*ServiceTokenResponse, *http.Response, error) {
	return r.ApiService.RenameServiceTokenExecute(r)
}

/*
RenameServiceToken Method for RenameServiceToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRenameServiceTokenRequest
*/
func (a *ServiceTokenApiAPIService) RenameServiceToken(ctx context.Context) ApiRenameServiceTokenRequest {
	return ApiRenameServiceTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceTokenResponse
func (a *ServiceTokenApiAPIService) RenameServiceTokenExecute(r ApiRenameServiceTokenRequest) (*ServiceTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTokenApiAPIService.RenameServiceToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/servicetoken/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.renameServiceTokenRequest == nil {
		return localVarReturnValue, nil, reportError("renameServiceTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.renameServiceTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRevokeServiceTokenRequest struct {
	ctx                       context.Context
	ApiService                ServiceTokenApiAPI
	deleteServiceTokenRequest *DeleteServiceTokenRequest
	authorization             *string
	dPoP                      *string
}

func (r ApiRevokeServiceTokenRequest) DeleteServiceTokenRequest(deleteServiceTokenRequest DeleteServiceTokenRequest) ApiRevokeServiceTokenRequest {
	r.deleteServiceTokenRequest = &deleteServiceTokenRequest
	return r
}

func (r ApiRevokeServiceTokenRequest) Authorization(authorization string) ApiRevokeServiceTokenRequest {
	r.authorization = &authorization
	return r
}

func (r ApiRevokeServiceTokenRequest) DPoP(dPoP string) ApiRevokeServiceTokenRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiRevokeServiceTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevokeServiceTokenExecute(r)
}

/*
RevokeServiceToken Method for RevokeServiceToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRevokeServiceTokenRequest
*/
func (a *ServiceTokenApiAPIService) RevokeServiceToken(ctx context.Context) ApiRevokeServiceTokenRequest {
	return ApiRevokeServiceTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ServiceTokenApiAPIService) RevokeServiceTokenExecute(r ApiRevokeServiceTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTokenApiAPIService.RevokeServiceToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/servicetoken/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteServiceTokenRequest == nil {
		return nil, reportError("deleteServiceTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.deleteServiceTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRotateServiceTokenRequest struct {
	ctx                       context.Context
	ApiService                ServiceTokenApiAPI
	rotateServiceTokenRequest *RotateServiceTokenRequest
	authorization             *string
	dPoP                      *string
}

func (r ApiRotateServiceTokenRequest) RotateServiceTokenRequest(rotateServiceTokenRequest RotateServiceTokenRequest) ApiRotateServiceTokenRequest {
	r.rotateServiceTokenRequest = &rotateServiceTokenRequest
	return r
}

func (r ApiRotateServiceTokenRequest) Authorization(authorization string) ApiRotateServiceTokenRequest {
	r.authorization = &authorization
	return r
}

func (r ApiRotateServiceTokenRequest) DPoP(dPoP string) ApiRotateServiceTokenRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiRotateServiceTokenRequest) Execute() (*ServiceTokenResponse, *http.Response, error) {
	return r.ApiService.RotateServiceTokenExecute(r)
}

/*
RotateServiceToken Method for RotateServiceToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRotateServiceTokenRequest
*/
func (a *ServiceTokenApiAPIService) RotateServiceToken(ctx context.Context) ApiRotateServiceTokenRequest {
	return ApiRotateServiceTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceTokenResponse
func (a *ServiceTokenApiAPIService) RotateServiceTokenExecute(r ApiRotateServiceTokenRequest) (*ServiceTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTokenApiAPIService.RotateServiceToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/servicetoken/rotate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rotateServiceTokenRequest == nil {
		return localVarReturnValue, nil, reportError("rotateServiceTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.rotateServiceTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
