/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ApiServerApiAPI interface {

	/*
		CreateApiServer Method for CreateApiServer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateApiServerRequest
	*/
	CreateApiServer(ctx context.Context) ApiCreateApiServerRequest

	// CreateApiServerExecute executes the request
	//  @return AuthleteApiServerUpdateResponse
	CreateApiServerExecute(r ApiCreateApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error)

	/*
		DeleteApiServer Method for DeleteApiServer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id
		@return ApiDeleteApiServerRequest
	*/
	DeleteApiServer(ctx context.Context, id int64) ApiDeleteApiServerRequest

	// DeleteApiServerExecute executes the request
	DeleteApiServerExecute(r ApiDeleteApiServerRequest) (*http.Response, error)

	/*
		GetAll1 Method for GetAll1

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetAll1Request
	*/
	GetAll1(ctx context.Context) ApiGetAll1Request

	// GetAll1Execute executes the request
	//  @return []AuthleteApiServerUpdateResponse
	GetAll1Execute(r ApiGetAll1Request) ([]AuthleteApiServerUpdateResponse, *http.Response, error)

	/*
		GetApiServer Method for GetApiServer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id
		@return ApiGetApiServerRequest
	*/
	GetApiServer(ctx context.Context, id int64) ApiGetApiServerRequest

	// GetApiServerExecute executes the request
	//  @return AuthleteApiServerUpdateResponse
	GetApiServerExecute(r ApiGetApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error)

	/*
		UpdateApiServer Method for UpdateApiServer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id
		@return ApiUpdateApiServerRequest
	*/
	UpdateApiServer(ctx context.Context, id int64) ApiUpdateApiServerRequest

	// UpdateApiServerExecute executes the request
	//  @return AuthleteApiServerUpdateResponse
	UpdateApiServerExecute(r ApiUpdateApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error)
}

// ApiServerApiAPIService ApiServerApiAPI service
type ApiServerApiAPIService service

type ApiCreateApiServerRequest struct {
	ctx                    context.Context
	ApiService             ApiServerApiAPI
	createApiServerRequest *CreateApiServerRequest
	authorization          *string
	dPoP                   *string
}

func (r ApiCreateApiServerRequest) CreateApiServerRequest(createApiServerRequest CreateApiServerRequest) ApiCreateApiServerRequest {
	r.createApiServerRequest = &createApiServerRequest
	return r
}

func (r ApiCreateApiServerRequest) Authorization(authorization string) ApiCreateApiServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateApiServerRequest) DPoP(dPoP string) ApiCreateApiServerRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiCreateApiServerRequest) Execute() (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	return r.ApiService.CreateApiServerExecute(r)
}

/*
CreateApiServer Method for CreateApiServer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateApiServerRequest
*/
func (a *ApiServerApiAPIService) CreateApiServer(ctx context.Context) ApiCreateApiServerRequest {
	return ApiCreateApiServerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AuthleteApiServerUpdateResponse
func (a *ApiServerApiAPIService) CreateApiServerExecute(r ApiCreateApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthleteApiServerUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiServerApiAPIService.CreateApiServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/apiserver"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createApiServerRequest == nil {
		return localVarReturnValue, nil, reportError("createApiServerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.createApiServerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteApiServerRequest struct {
	ctx           context.Context
	ApiService    ApiServerApiAPI
	id            int64
	authorization *string
	dPoP          *string
}

func (r ApiDeleteApiServerRequest) Authorization(authorization string) ApiDeleteApiServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteApiServerRequest) DPoP(dPoP string) ApiDeleteApiServerRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiDeleteApiServerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApiServerExecute(r)
}

/*
DeleteApiServer Method for DeleteApiServer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiDeleteApiServerRequest
*/
func (a *ApiServerApiAPIService) DeleteApiServer(ctx context.Context, id int64) ApiDeleteApiServerRequest {
	return ApiDeleteApiServerRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ApiServerApiAPIService) DeleteApiServerExecute(r ApiDeleteApiServerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiServerApiAPIService.DeleteApiServer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/apiserver/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAll1Request struct {
	ctx           context.Context
	ApiService    ApiServerApiAPI
	authorization *string
	dPoP          *string
}

func (r ApiGetAll1Request) Authorization(authorization string) ApiGetAll1Request {
	r.authorization = &authorization
	return r
}

func (r ApiGetAll1Request) DPoP(dPoP string) ApiGetAll1Request {
	r.dPoP = &dPoP
	return r
}

func (r ApiGetAll1Request) Execute() ([]AuthleteApiServerUpdateResponse, *http.Response, error) {
	return r.ApiService.GetAll1Execute(r)
}

/*
GetAll1 Method for GetAll1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAll1Request
*/
func (a *ApiServerApiAPIService) GetAll1(ctx context.Context) ApiGetAll1Request {
	return ApiGetAll1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []AuthleteApiServerUpdateResponse
func (a *ApiServerApiAPIService) GetAll1Execute(r ApiGetAll1Request) ([]AuthleteApiServerUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AuthleteApiServerUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiServerApiAPIService.GetAll1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/apiserver"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiServerRequest struct {
	ctx           context.Context
	ApiService    ApiServerApiAPI
	id            int64
	authorization *string
	dPoP          *string
}

func (r ApiGetApiServerRequest) Authorization(authorization string) ApiGetApiServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetApiServerRequest) DPoP(dPoP string) ApiGetApiServerRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiGetApiServerRequest) Execute() (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	return r.ApiService.GetApiServerExecute(r)
}

/*
GetApiServer Method for GetApiServer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetApiServerRequest
*/
func (a *ApiServerApiAPIService) GetApiServer(ctx context.Context, id int64) ApiGetApiServerRequest {
	return ApiGetApiServerRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AuthleteApiServerUpdateResponse
func (a *ApiServerApiAPIService) GetApiServerExecute(r ApiGetApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthleteApiServerUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiServerApiAPIService.GetApiServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/apiserver/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateApiServerRequest struct {
	ctx                    context.Context
	ApiService             ApiServerApiAPI
	id                     int64
	updateApiServerRequest *UpdateApiServerRequest
	authorization          *string
	dPoP                   *string
}

func (r ApiUpdateApiServerRequest) UpdateApiServerRequest(updateApiServerRequest UpdateApiServerRequest) ApiUpdateApiServerRequest {
	r.updateApiServerRequest = &updateApiServerRequest
	return r
}

func (r ApiUpdateApiServerRequest) Authorization(authorization string) ApiUpdateApiServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateApiServerRequest) DPoP(dPoP string) ApiUpdateApiServerRequest {
	r.dPoP = &dPoP
	return r
}

func (r ApiUpdateApiServerRequest) Execute() (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	return r.ApiService.UpdateApiServerExecute(r)
}

/*
UpdateApiServer Method for UpdateApiServer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiUpdateApiServerRequest
*/
func (a *ApiServerApiAPIService) UpdateApiServer(ctx context.Context, id int64) ApiUpdateApiServerRequest {
	return ApiUpdateApiServerRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AuthleteApiServerUpdateResponse
func (a *ApiServerApiAPIService) UpdateApiServerExecute(r ApiUpdateApiServerRequest) (*AuthleteApiServerUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthleteApiServerUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiServerApiAPIService.UpdateApiServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/apiserver/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateApiServerRequest == nil {
		return localVarReturnValue, nil, reportError("updateApiServerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.dPoP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "DPoP", r.dPoP, "simple", "")
	}
	// body params
	localVarPostBody = r.updateApiServerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
