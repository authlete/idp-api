/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateApiServerPrivilegesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateApiServerPrivilegesRequest{}

// UpdateApiServerPrivilegesRequest struct for UpdateApiServerPrivilegesRequest
type UpdateApiServerPrivilegesRequest struct {
	ApiServerId          int64    `json:"apiServerId"`
	OrganizationId       int64    `json:"organizationId"`
	UserId               int64    `json:"userId"`
	Privileges           []string `json:"privileges,omitempty"`
	AllServicePrivileges []string `json:"allServicePrivileges,omitempty"`
	AllClientPrivileges  []string `json:"allClientPrivileges,omitempty"`
}

type _UpdateApiServerPrivilegesRequest UpdateApiServerPrivilegesRequest

// NewUpdateApiServerPrivilegesRequest instantiates a new UpdateApiServerPrivilegesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateApiServerPrivilegesRequest(apiServerId int64, organizationId int64, userId int64) *UpdateApiServerPrivilegesRequest {
	this := UpdateApiServerPrivilegesRequest{}
	this.ApiServerId = apiServerId
	this.OrganizationId = organizationId
	this.UserId = userId
	return &this
}

// NewUpdateApiServerPrivilegesRequestWithDefaults instantiates a new UpdateApiServerPrivilegesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApiServerPrivilegesRequestWithDefaults() *UpdateApiServerPrivilegesRequest {
	this := UpdateApiServerPrivilegesRequest{}
	return &this
}

// GetApiServerId returns the ApiServerId field value
func (o *UpdateApiServerPrivilegesRequest) GetApiServerId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ApiServerId
}

// GetApiServerIdOk returns a tuple with the ApiServerId field value
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetApiServerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiServerId, true
}

// SetApiServerId sets field value
func (o *UpdateApiServerPrivilegesRequest) SetApiServerId(v int64) {
	o.ApiServerId = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *UpdateApiServerPrivilegesRequest) GetOrganizationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetOrganizationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *UpdateApiServerPrivilegesRequest) SetOrganizationId(v int64) {
	o.OrganizationId = v
}

// GetUserId returns the UserId field value
func (o *UpdateApiServerPrivilegesRequest) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UpdateApiServerPrivilegesRequest) SetUserId(v int64) {
	o.UserId = v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *UpdateApiServerPrivilegesRequest) GetPrivileges() []string {
	if o == nil || IsNil(o.Privileges) {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetPrivilegesOk() ([]string, bool) {
	if o == nil || IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *UpdateApiServerPrivilegesRequest) HasPrivileges() bool {
	if o != nil && !IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *UpdateApiServerPrivilegesRequest) SetPrivileges(v []string) {
	o.Privileges = v
}

// GetAllServicePrivileges returns the AllServicePrivileges field value if set, zero value otherwise.
func (o *UpdateApiServerPrivilegesRequest) GetAllServicePrivileges() []string {
	if o == nil || IsNil(o.AllServicePrivileges) {
		var ret []string
		return ret
	}
	return o.AllServicePrivileges
}

// GetAllServicePrivilegesOk returns a tuple with the AllServicePrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetAllServicePrivilegesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllServicePrivileges) {
		return nil, false
	}
	return o.AllServicePrivileges, true
}

// HasAllServicePrivileges returns a boolean if a field has been set.
func (o *UpdateApiServerPrivilegesRequest) HasAllServicePrivileges() bool {
	if o != nil && !IsNil(o.AllServicePrivileges) {
		return true
	}

	return false
}

// SetAllServicePrivileges gets a reference to the given []string and assigns it to the AllServicePrivileges field.
func (o *UpdateApiServerPrivilegesRequest) SetAllServicePrivileges(v []string) {
	o.AllServicePrivileges = v
}

// GetAllClientPrivileges returns the AllClientPrivileges field value if set, zero value otherwise.
func (o *UpdateApiServerPrivilegesRequest) GetAllClientPrivileges() []string {
	if o == nil || IsNil(o.AllClientPrivileges) {
		var ret []string
		return ret
	}
	return o.AllClientPrivileges
}

// GetAllClientPrivilegesOk returns a tuple with the AllClientPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApiServerPrivilegesRequest) GetAllClientPrivilegesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllClientPrivileges) {
		return nil, false
	}
	return o.AllClientPrivileges, true
}

// HasAllClientPrivileges returns a boolean if a field has been set.
func (o *UpdateApiServerPrivilegesRequest) HasAllClientPrivileges() bool {
	if o != nil && !IsNil(o.AllClientPrivileges) {
		return true
	}

	return false
}

// SetAllClientPrivileges gets a reference to the given []string and assigns it to the AllClientPrivileges field.
func (o *UpdateApiServerPrivilegesRequest) SetAllClientPrivileges(v []string) {
	o.AllClientPrivileges = v
}

func (o UpdateApiServerPrivilegesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateApiServerPrivilegesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiServerId"] = o.ApiServerId
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["userId"] = o.UserId
	if !IsNil(o.Privileges) {
		toSerialize["privileges"] = o.Privileges
	}
	if !IsNil(o.AllServicePrivileges) {
		toSerialize["allServicePrivileges"] = o.AllServicePrivileges
	}
	if !IsNil(o.AllClientPrivileges) {
		toSerialize["allClientPrivileges"] = o.AllClientPrivileges
	}
	return toSerialize, nil
}

func (o *UpdateApiServerPrivilegesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiServerId",
		"organizationId",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateApiServerPrivilegesRequest := _UpdateApiServerPrivilegesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateApiServerPrivilegesRequest)

	if err != nil {
		return err
	}

	*o = UpdateApiServerPrivilegesRequest(varUpdateApiServerPrivilegesRequest)

	return err
}

type NullableUpdateApiServerPrivilegesRequest struct {
	value *UpdateApiServerPrivilegesRequest
	isSet bool
}

func (v NullableUpdateApiServerPrivilegesRequest) Get() *UpdateApiServerPrivilegesRequest {
	return v.value
}

func (v *NullableUpdateApiServerPrivilegesRequest) Set(val *UpdateApiServerPrivilegesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApiServerPrivilegesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApiServerPrivilegesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApiServerPrivilegesRequest(val *UpdateApiServerPrivilegesRequest) *NullableUpdateApiServerPrivilegesRequest {
	return &NullableUpdateApiServerPrivilegesRequest{value: val, isSet: true}
}

func (v NullableUpdateApiServerPrivilegesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApiServerPrivilegesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
