/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebAuthnChallengeResponse struct for WebAuthnChallengeResponse
type WebAuthnChallengeResponse struct {
	Challenge *Challenge `json:"challenge,omitempty"`
	Authenticators []string `json:"authenticators,omitempty"`
}

// NewWebAuthnChallengeResponse instantiates a new WebAuthnChallengeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebAuthnChallengeResponse() *WebAuthnChallengeResponse {
	this := WebAuthnChallengeResponse{}
	return &this
}

// NewWebAuthnChallengeResponseWithDefaults instantiates a new WebAuthnChallengeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebAuthnChallengeResponseWithDefaults() *WebAuthnChallengeResponse {
	this := WebAuthnChallengeResponse{}
	return &this
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *WebAuthnChallengeResponse) GetChallenge() Challenge {
	if o == nil || isNil(o.Challenge) {
		var ret Challenge
		return ret
	}
	return *o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebAuthnChallengeResponse) GetChallengeOk() (*Challenge, bool) {
	if o == nil || isNil(o.Challenge) {
    return nil, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *WebAuthnChallengeResponse) HasChallenge() bool {
	if o != nil && !isNil(o.Challenge) {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given Challenge and assigns it to the Challenge field.
func (o *WebAuthnChallengeResponse) SetChallenge(v Challenge) {
	o.Challenge = &v
}

// GetAuthenticators returns the Authenticators field value if set, zero value otherwise.
func (o *WebAuthnChallengeResponse) GetAuthenticators() []string {
	if o == nil || isNil(o.Authenticators) {
		var ret []string
		return ret
	}
	return o.Authenticators
}

// GetAuthenticatorsOk returns a tuple with the Authenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebAuthnChallengeResponse) GetAuthenticatorsOk() ([]string, bool) {
	if o == nil || isNil(o.Authenticators) {
    return nil, false
	}
	return o.Authenticators, true
}

// HasAuthenticators returns a boolean if a field has been set.
func (o *WebAuthnChallengeResponse) HasAuthenticators() bool {
	if o != nil && !isNil(o.Authenticators) {
		return true
	}

	return false
}

// SetAuthenticators gets a reference to the given []string and assigns it to the Authenticators field.
func (o *WebAuthnChallengeResponse) SetAuthenticators(v []string) {
	o.Authenticators = v
}

func (o WebAuthnChallengeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Challenge) {
		toSerialize["challenge"] = o.Challenge
	}
	if !isNil(o.Authenticators) {
		toSerialize["authenticators"] = o.Authenticators
	}
	return json.Marshal(toSerialize)
}

type NullableWebAuthnChallengeResponse struct {
	value *WebAuthnChallengeResponse
	isSet bool
}

func (v NullableWebAuthnChallengeResponse) Get() *WebAuthnChallengeResponse {
	return v.value
}

func (v *NullableWebAuthnChallengeResponse) Set(val *WebAuthnChallengeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebAuthnChallengeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebAuthnChallengeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebAuthnChallengeResponse(val *WebAuthnChallengeResponse) *NullableWebAuthnChallengeResponse {
	return &NullableWebAuthnChallengeResponse{value: val, isSet: true}
}

func (v NullableWebAuthnChallengeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebAuthnChallengeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


