/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type IntrospectionEndpointAPI interface {

	/*
		Introspect Method for Introspect

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiIntrospectRequest
	*/
	Introspect(ctx context.Context) ApiIntrospectRequest

	// IntrospectExecute executes the request
	//  @return string
	IntrospectExecute(r ApiIntrospectRequest) (string, *http.Response, error)
}

// IntrospectionEndpointAPIService IntrospectionEndpointAPI service
type IntrospectionEndpointAPIService service

type ApiIntrospectRequest struct {
	ctx        context.Context
	ApiService IntrospectionEndpointAPI
	all        *map[string]string
	empty      *bool
}

func (r ApiIntrospectRequest) All(all map[string]string) ApiIntrospectRequest {
	r.all = &all
	return r
}

func (r ApiIntrospectRequest) Empty(empty bool) ApiIntrospectRequest {
	r.empty = &empty
	return r
}

func (r ApiIntrospectRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.IntrospectExecute(r)
}

/*
Introspect Method for Introspect

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIntrospectRequest
*/
func (a *IntrospectionEndpointAPIService) Introspect(ctx context.Context) ApiIntrospectRequest {
	return ApiIntrospectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *IntrospectionEndpointAPIService) IntrospectExecute(r ApiIntrospectRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntrospectionEndpointAPIService.Introspect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/introspect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.all != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "all", r.all, "", "")
	}
	if r.empty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "empty", r.empty, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
