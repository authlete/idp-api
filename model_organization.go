/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Organization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Organization{}

// Organization struct for Organization
type Organization struct {
	Id             *int64               `json:"id,omitempty"`
	Xid            *int64               `json:"xid,omitempty"`
	Name           *string              `json:"name,omitempty"`
	Plan           *string              `json:"plan,omitempty"`
	ServiceListing []ServiceInstance    `json:"serviceListing,omitempty"`
	Members        []OrganizationAccess `json:"members,omitempty"`
}

// NewOrganization instantiates a new Organization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganization() *Organization {
	this := Organization{}
	return &this
}

// NewOrganizationWithDefaults instantiates a new Organization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationWithDefaults() *Organization {
	this := Organization{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Organization) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Organization) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Organization) SetId(v int64) {
	o.Id = &v
}

// GetXid returns the Xid field value if set, zero value otherwise.
func (o *Organization) GetXid() int64 {
	if o == nil || IsNil(o.Xid) {
		var ret int64
		return ret
	}
	return *o.Xid
}

// GetXidOk returns a tuple with the Xid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetXidOk() (*int64, bool) {
	if o == nil || IsNil(o.Xid) {
		return nil, false
	}
	return o.Xid, true
}

// HasXid returns a boolean if a field has been set.
func (o *Organization) HasXid() bool {
	if o != nil && !IsNil(o.Xid) {
		return true
	}

	return false
}

// SetXid gets a reference to the given int64 and assigns it to the Xid field.
func (o *Organization) SetXid(v int64) {
	o.Xid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Organization) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Organization) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Organization) SetName(v string) {
	o.Name = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *Organization) GetPlan() string {
	if o == nil || IsNil(o.Plan) {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetPlanOk() (*string, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *Organization) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *Organization) SetPlan(v string) {
	o.Plan = &v
}

// GetServiceListing returns the ServiceListing field value if set, zero value otherwise.
func (o *Organization) GetServiceListing() []ServiceInstance {
	if o == nil || IsNil(o.ServiceListing) {
		var ret []ServiceInstance
		return ret
	}
	return o.ServiceListing
}

// GetServiceListingOk returns a tuple with the ServiceListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetServiceListingOk() ([]ServiceInstance, bool) {
	if o == nil || IsNil(o.ServiceListing) {
		return nil, false
	}
	return o.ServiceListing, true
}

// HasServiceListing returns a boolean if a field has been set.
func (o *Organization) HasServiceListing() bool {
	if o != nil && !IsNil(o.ServiceListing) {
		return true
	}

	return false
}

// SetServiceListing gets a reference to the given []ServiceInstance and assigns it to the ServiceListing field.
func (o *Organization) SetServiceListing(v []ServiceInstance) {
	o.ServiceListing = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Organization) GetMembers() []OrganizationAccess {
	if o == nil || IsNil(o.Members) {
		var ret []OrganizationAccess
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organization) GetMembersOk() ([]OrganizationAccess, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Organization) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []OrganizationAccess and assigns it to the Members field.
func (o *Organization) SetMembers(v []OrganizationAccess) {
	o.Members = v
}

func (o Organization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Organization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Xid) {
		toSerialize["xid"] = o.Xid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.ServiceListing) {
		toSerialize["serviceListing"] = o.ServiceListing
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableOrganization struct {
	value *Organization
	isSet bool
}

func (v NullableOrganization) Get() *Organization {
	return v.value
}

func (v *NullableOrganization) Set(val *Organization) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganization(val *Organization) *NullableOrganization {
	return &NullableOrganization{value: val, isSet: true}
}

func (v NullableOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
